 show dbs
 use students
 db.students.insertOne({ "name": "vimal", "mob": 1111 })
 db.students.find()
 db.students.find().pretty()
 db.students.insertOne({ "name": "abhi", "mob": 22222 , _id: 1})
 db.students.deleteOne({name: "vimal"})
 db.students.updateOne({name: "abhi"} , { $set: {marker: "delete"} } )
 db.students.insertOne({ "name": "vimal", "mob": 1111 })
 db.students.updateMany({} , { $set: { marker: "toDelete" } } )
 db.students.deleteMany({marker: "toDelete"})
 db.students.insertMany([ { name: 'abhi', mob: 22222} ,{  name: 'vimal', mob: 3333 } ])
 db.students.find({ mob: 22222})
 
 db.students.find({ mob: { $gt: 333 } })
 db.students.findOne({ mob: { $gt: 333 } })
 db.students.updateOne({ _id: ObjectId("62e42501f13bf4b82f9f80f2")} , {$set: {allowed: true}}  )
 db.students.update({ _id: ObjectId("62e42501f13bf4b82f9f80f2")} , {$set: {allowed: false}}  )
 
 
db.students.replaceOne({ _id: ObjectId("62e42501f13bf4b82f9f80f2")} , { datanew: "allreplace"}   )

# show all data without giving cursor
db.students.find().pretty().toArray()

# iterate cursor reference by foreach using JS anonymous function
db.students.find().forEach( (data) => { printjson(data)})

# projection
db.students.find({} , {mob: 1} )
db.students.find({} , {name: 1 , _id: 0} )

# embedded or nested document
db.students.updateMany({}, { $set: { "status": { description: "great" , markname: "test" }  } })

* Index
 * db.person.createIndex({"dob.age" : 1})  [db.person.explain("executionStats").find({"dob.age": 47})]
   

db.students.updateOne({ name: "abhi"} , { $set: {hobbies: ["sports" , "cooking"] } })

db.students.findOne({ name: "abhi" }).hobbies
db.students.find({ hobbies: "sports" })
db.students.findOne({ hobbies: "sports" }).mob
db.students.find({ "status.description": "great" })
#To find the nested key 
 db.students.find( {"dob.age" : 32  } )
 
 db.stats()
 console.log("hi")
 #executinStats
 db.person.explain().find({"dob.age": 47})
 db.person.explain("executionStats").find({"dob.age": 47})
 
 # db.st.insertOne({name: 'a' ,createAt: new Date() }) create at time
 
 students> db.students.drop()
 students> db.dropDatabase()
 
 


